{"version":3,"sources":["shadow/test.cljs"],"mappings":"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","names":["shadow.test/run-tests-block","env","namespaces","summary","cljs.core/volatile!","merge-counters","G__40522","G__40523","fexpr__40521","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/merge-with","cljs.core/+","cljs.test/get-current-env","cljs.test/set-env!","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","ns","shadow.test/test-ns-block","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__40532","cljs.core/deref","cljs.test/report","G__40534","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.test/clear-env!","var_args","G__40537","shadow.test/run-tests","js/Error","shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1","cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0","shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2","shadow.test.env/get-test-namespaces","cljs.test/run-block","G__40548","shadow.test/run-all-tests","shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2","re","p1__40539#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","or__4185__auto__","cljs.core/re-matches","shadow.test/test-all-vars-block","map__40552","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fixtures","vars","test-ns","shadow.test.env/get-test-ns-info","temp__5735__auto__","fix","cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","cljs.test/test-vars-block","shadow.test/test-all-vars","G__40563","cljs.core/Symbol","cljs.test/do-report","cljs.test/block","G__40571","shadow.test/test-ns","shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns shadow.test\n  \"cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test\"\n  (:require [cljs.test :as ct]\n            [shadow.test.env :as env]))\n\n(declare test-ns-block)\n\n(defn run-tests-block\n  \"Like test-vars, but returns a block for further composition and\n  later execution.\"\n  [env namespaces]\n\n  (let [summary\n        (volatile!\n          {:test 0 :pass 0 :fail 0 :error 0\n           :type :summary})\n\n        merge-counters\n        (fn []\n          (vswap!\n            summary\n            (partial merge-with +)\n            (:report-counters (ct/get-current-env))))]\n\n    (-> [(fn [] (ct/set-env! env))]\n        (into (->> namespaces\n                   (mapcat (fn [ns]\n                             (-> (test-ns-block env ns)\n                                 (conj merge-counters))))))\n        (conj (fn []\n                (ct/report @summary)\n                (ct/report (assoc @summary :type :end-run-tests))\n                (ct/clear-env!))))))\n\n(defn run-tests\n  ([]\n   (run-tests (ct/empty-env)))\n  ([env]\n   (run-tests env (env/get-test-namespaces)))\n  ([env namespaces]\n   (ct/run-block (run-tests-block env namespaces))))\n\n(defn run-all-tests\n  \"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.\"\n  ([] (run-all-tests (ct/empty-env) nil))\n  ([env] (run-all-tests env nil))\n  ([env re]\n   (run-tests env\n     (->> (env/get-test-namespaces)\n          (filter #(or (nil? re)\n                       (re-matches re (str %))))\n          (into [])))))\n\n(defn test-all-vars-block [ns]\n  (let [env (ct/get-current-env)\n        {:keys [fixtures vars] :as test-ns}\n        (env/get-test-ns-info ns)]\n\n    (-> [(fn []\n           (when (nil? env)\n             (ct/set-env! (ct/empty-env)))\n           (when-let [fix (:once fixtures)]\n             (ct/update-current-env! [:once-fixtures] assoc ns fix))\n           (when-let [fix (:each fixtures)]\n             (ct/update-current-env! [:each-fixtures] assoc ns fix)))]\n\n        (into (ct/test-vars-block vars))\n        #_(conj (fn []\n                  (when (nil? env)\n                    (ct/clear-env!)))))))\n\n(defn test-all-vars\n  \"Calls test-vars on every var with :test metadata interned in the\n  namespace, with fixtures.\"\n  [ns]\n  (ct/run-block\n    (-> (test-all-vars-block ns)\n        (conj (fn []\n                (ct/report {:type :end-test-all-vars :ns ns}))))))\n\n(defn test-ns-block\n  \"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.\"\n  ([env ns]\n   {:pre [(symbol? ns)]}\n   [(fn []\n      (ct/set-env! env)\n      (ct/do-report {:type :begin-test-ns, :ns ns})\n      ;; If the namespace has a test-ns-hook function, call that:\n      ;; FIXME: must turn test-ns-hook into macro so it registers itself instead of just calling a defn\n      (ct/block (test-all-vars-block ns)))\n    (fn []\n      (ct/do-report {:type :end-test-ns, :ns ns}))]))\n\n(defn test-ns\n  \"If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *initial-report-counters*.  \"\n  ([ns] (test-ns (ct/empty-env) ns))\n  ([env ns]\n   (ct/run-block\n     (concat (test-ns-block env ns)\n       [(fn []\n          (ct/clear-env!))]))))\n"]}