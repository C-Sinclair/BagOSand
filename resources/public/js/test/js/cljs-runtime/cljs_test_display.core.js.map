{"version":3,"sources":["cljs_test_display/core.cljs"],"mappings":"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","names":["js/goog.define","cljs-test-display.core/root-node-id","cljs-test-display.core/change-favicon","cljs-test-display.core/notifications","cljs-test-display.core/printing","js/cljs-test-display","js/cljs-test-display.core","js/cljs-test-display.core.state","cljs-test-display.core/state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs-test-display.core/root-app-node","goog.dom/getElement","cljs-test-display.core/push-node!","node","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cljs-test-display.core/pop-node!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/rest","cljs-test-display.core/initialize-state!","cljs.core/reset!","cljs-test-display.core/current-node","cljs.core/first","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs-test-display.core/current-node-parent","cljs.core/second","cljs-test-display.core/next-error-count","cljs.core/inc","js/cljs-test-display.core.register-document-events!","cljs-test-display.core/register-document-events!","cljs.core/memoize","G__40989","G__40990","G__40991","goog.events/listen","goog.dom/getDocument","goog.events.EventType/KEYDOWN","e","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/P","cljs-test-display.core/click-toggle","style-string","cljs-test-display.core/insert-style!","G__40999","G__41000","G__41001","cljs-test-display.core/n","head","goog.dom/getElementsByTagName","goog.dom/appendChild","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","seq41003","G__41004","cljs.core/next","G__41005","self__4776__auto__","tag","attributes","contents","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","goog.dom/createDom","cljs.core/name","cljs.core/clj->js","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","x","js/HTMLElement","cljs.core/Symbol","G__41016","goog.dom/createTextNode","G__41017","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/some?","cljs-test-display.core/magic-keyword->attrs","k","cljs.core/Keyword","vec__41018","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","classes","clojure.string.split.cljs$core$IFn$_invoke$arity$2","id","clojure.string/starts-with?","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","G__41024","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not-empty","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs-test-display.core/tag-fn","klass","vec__41025","cljs.core/cons","cljs-test-display.core/div","cljs-test-display.core/span","G__41032","cljs-test-display.core/code","js/Error","code-str","cljs_test_display.core.code.cljs$core$IFn$_invoke$arity$2","cljs_test_display.core.n.cljs$core$IFn$_invoke$arity$variadic","cljs-test-display.core/current-var-info","var","cljs.core/reverse","cljs.test/get-current-env","cljs.core/meta","p__41037","map__41038","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs-test-display.core/process-file-name","ns","file","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs-test-display.core/failed?","m","cljs-test-display.core/pluralize","s","n","G__41040","G__41041","goog.dom.classlist/toggle","cljs-test-display.core/header-node","G__41046","G__41047","G__41048","G__41049","G__41050","G__41051","G__41052","G__41053","G__41054","G__41055","G__41056","cljs-test-display.core/add-header-node!","G__41057","G__41058","G__41059","G__41060","G__41061","G__41062","cljs-test-display.core/contexts-node","cljs.core/seq","G__41063","G__41064","cljs.test/testing-contexts-str","p__41065","map__41066","cljs-test-display.core/comparison","actual","expected","G__41068","G__41069","cljs_test_display.core.code.cljs$core$IFn$_invoke$arity$1","G__41070","G__41071","G__41072","G__41073","G__41074","cljs-test-display.core/add-fail-node!","formatter-fn","or__4185__auto__","cljs.core/pr-str","G__41076","G__41077","G__41078","G__41080","G__41081","G__41082","temp__5735__auto__","message","G__41083","G__41084","curr-node","goog.dom.classlist/add","G__41085","G__41086","p__41089","map__41091","cljs-test-display.core/error-comparison","G__41093","G__41094","G__41095","G__41096","G__41097","G__41098","G__41100","G__41101","G__41102","G__41103","error-number","js/console.log","js/console.error","G__41104","G__41105","cljs-test-display.core/add-error-node!","G__41112","G__41113","G__41114","G__41116","G__41117","G__41118","G__41120","G__41121","G__41122","G__41123","cljs-test-display.core/add-passing-node!","G__41131","G__41132","G__41134","cljs-test-display.core/add-ns-node!","new-current-node","G__41150","G__41151","p1__41139#","cljs-test-display.core/add-var-node","map__41166","name","line","info","G__41177","G__41178","G__41187","G__41188","G__41189","G__41193","G__41194","G__41195","G__41196","p1__41161#","p__41236","map__41238","cljs-test-display.core/summary","fail","error","pass","test","G__41256","G__41257","G__41258","G__41259","G__41260","G__41273","G__41274","G__41282","G__41283","G__41284","G__41285","G__41286","G__41287","G__41288","G__41289","G__41290","G__41291","G__41296","assertions","G__41300","cljs-test-display.core/display-summary!","report-header","summary-node'","G__41302","G__41303","goog.dom/removeChildren","G__41304","G__41305","cljs-test-display.core/print-comparison","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","G__41317","G__41318","cljs.test/report","cljs.test/inc-report-counter!","cljs.test/testing-vars-str","cljs-test-display.favicon/red","cljs-test-display.favicon/green","cljs-test-display.notify/failure","cljs-test-display.notify/success","G__41323","G__41324","G__41325","G__41326","G__41327","G__41328","G__41329","G__41330","G__41331","G__41332","G__41333","G__41334","cljs-test-display.core/empty-env","cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0","G__41336","cljs-test-display.core/init!","cljs_test_display.core.init_BANG_.cljs$core$IFn$_invoke$arity$1","app-node-id","goog/global.document","G__41337","cljs-test-display.notify/ask-permission!","cljs.core/List"],"sourcesContent":["(ns cljs-test-display.core\n  (:require\n   [cljs.test :refer [report inc-report-counter!\n                      testing-contexts-str\n                      testing-vars-str\n                      get-current-env]\n    :include-macros true]\n   [clojure.string :as string]\n   [goog.dom :as gdom]\n   [goog.dom.classlist :as classlist]\n   [goog.events :as events]\n   [goog.events.EventType :as evtype]\n   [goog.events.KeyCodes :as key-codes]\n   [cljs-test-display.favicon :as favicon]\n   [cljs-test-display.notify :as notify])\n  (:require-macros\n   [cljs-test-display.core :refer [css]]))\n\n;; ------------------------------------------------------------\n;; State Management\n;; ------------------------------------------------------------\n\n;; root-node-id specifies the id of the dom element to mount the\n;; testing application to\n(goog-define root-node-id \"app\")\n\n;; change-favicon specifies wether to change the favicon to red or\n;; green when tests complete\n(goog-define change-favicon true)\n\n;; notifications specifies wether to use the Web Notification API to\n;; to provide feedback about test results\n(goog-define notifications true)\n\n;; printing specifies wether to print out test results in the console\n;; as well\n(goog-define printing false)\n\n(defonce state (atom {}))\n\n(defn root-app-node [] (gdom/getElement root-node-id))\n\n(defn push-node! [node]\n  (swap! state update :current-node (fnil conj (list)) node))\n\n(defn pop-node! []\n  (swap! state update :current-node rest))\n\n(defn initialize-state! []\n  (reset! state {})\n  (push-node! (root-app-node)))\n\n(defn current-node []\n  (first (get @state :current-node)))\n\n(defn current-node-parent []\n  (second (get @state :current-node)))\n\n(defn next-error-count []\n  (:error-count (swap! state update :error-count (fnil inc 0))))\n\n(declare add-header-node! click-toggle n)\n\n(defonce register-document-events!\n  (memoize\n   (fn []\n     (events/listen (gdom/getDocument)\n                    evtype/KEYDOWN\n                    (fn [e]\n                      (when (= (.-keyCode e) key-codes/P)\n                        (click-toggle e)))))))\n\n(let [style-string (css)]\n  (defn insert-style! []\n    (when-not (gdom/getElement \"cljs-test-display-style\")\n      (let [node (n :style\n                    {:id \"cljs-test-display-style\"}\n                    style-string)\n            head (aget (gdom/getElementsByTagName \"head\") 0)]\n        (gdom/appendChild head node)))))\n\n#_ (insert-style!)\n\n;; ------------------------------------------------------------\n;; DOM Node Creation\n;; ------------------------------------------------------------\n\n(defn n [tag attributes & contents]\n  (apply gdom/createDom (name tag) (clj->js attributes)\n         (mapv\n          (fn [x]\n            (cond\n              (instance? js/HTMLElement x)\n              x\n              (or (string? x) (symbol? x))\n              (gdom/createTextNode (str x))\n              :else\n              (gdom/createTextNode (pr-str x))))\n          (filter some? contents))))\n\n(defn magic-keyword->attrs [k]\n  (if (keyword? k)\n    (let [classes (string/split (name k) \".\")\n          [id classes] (if (string/starts-with? (first classes) \"#\")\n                         [(subs (first classes) 1) (rest classes)]\n                         [nil classes])]\n      (cond-> {}\n        id (assoc :id id)\n        (not-empty classes) (assoc :class (string/join \" \" classes))))\n    {}))\n\n(defn tag-fn [tag]\n  (fn [klass & contents]\n    (let [[klass contents] (if (keyword? klass)\n                             [klass contents]\n                             [nil (cons klass contents)])]\n      (apply n tag (magic-keyword->attrs klass) contents))))\n\n(def div (tag-fn :div))\n(def span (tag-fn :span))\n\n(defn code\n  ([code-str] (code nil code-str))\n  ([klass code-str]\n   (n :pre (magic-keyword->attrs klass)\n      (n :code {} (pr-str code-str)))))\n\n;; ------------------------------------------------------------\n;; Data Helpers\n;; ------------------------------------------------------------\n\n(defn current-var-info []\n  (let [var (first (reverse (:testing-vars (get-current-env))))]\n    (meta var)))\n\n(defn process-file-name [{:keys [ns file]}]\n  (string/join \"/\"\n               (reverse\n                (take (inc (count (string/split (name ns) #\"\\.\")))\n                      (reverse (string/split file  #\"[/\\\\]\"))))))\n\n(defn failed? [m]\n  (not (zero? (+ (:fail m) (:error m)))))\n\n(defn pluralize [s n]\n  (if (= n 1) s (str s \"s\")))\n\n;; ------------------------------------------------------------\n;; DOM Templates\n;; ------------------------------------------------------------\n\n;; ------------------------------------------------------------\n;; Header\n\n(defn click-toggle [e]\n  (classlist/toggle (root-app-node) \"hide-passing\"))\n\n(defn header-node []\n  (div :#report-header\n     (div :container.report-body \n          (div :page-title\n               (n :img\n                  {:width 50\n                   :height 50\n                   :src \"https://clojurescript.org/images/cljs-logo-120b.png\"})\n               (div :test-title \"Test Run\"))\n          (div :#summary))))\n\n(defn add-header-node! []\n  (gdom/appendChild (root-app-node) (header-node))\n  (gdom/appendChild (root-app-node)\n                    (div :controls.container\n                     (n :button {:id \"hide-show\"\n                                 :onclick\n                                 click-toggle}\n                        \"Hide/Show Passing\"))))\n\n;; ------------------------------------------------------------\n;; Failure\n\n(defn contexts-node []\n  (when (seq (:testing-contexts (get-current-env)))\n    (div :contexts (testing-contexts-str))))\n\n(defn comparison [{:keys [actual expected]}]\n  (div \n   (code expected)\n   (div :actual (div :arrow \"\u25b6\") (code actual))))\n\n(defn add-fail-node! [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)\n        node (div :test-fail\n                  (contexts-node)\n                  (div :fail-body\n                       (when-let [message (:message m)]\n                         (div :test-message message))\n                       (comparison m)))\n        curr-node (current-node)]\n    (classlist/add curr-node \"has-failures\")\n    (classlist/add (current-node-parent) \"has-failures\")\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Error\n\n(defn error-comparison [{:keys [expected actual]}]\n  (div\n   (code expected)\n   (div :cljs-test-actual\n        (span :error-prefix \"Error: \")\n        (when actual\n          (span :error-message (.-message actual)))\n        (when actual\n          (let [error-number (next-error-count)]\n            (js/console.log \"CLJS Test Error #\" error-number)\n            (js/console.error actual)\n            (div :view-stacktrace\n                 (str \"For stacktrace: See error number \" error-number \" in console\")))))))\n\n(defn add-error-node! [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)\n        node (div :test-fail.test-error\n                  (contexts-node)\n                  (div :fail-body\n                       (when-let [message (:message m)]\n                         (div :test-message message))\n                       (error-comparison m)))\n        curr-node (current-node)]\n    (classlist/add curr-node \"has-errors\")\n    (classlist/add (current-node-parent) \"has-errors\")\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Passing\n\n(defn add-passing-node! [m]\n  (gdom/appendChild (current-node) (div :test-passing)))\n\n;; ------------------------------------------------------------\n;; NS\n\n(defn add-ns-node! [m]\n  (let [curr-node (current-node)\n        new-current-node\n        (div :container.test-ns\n           (n :h2 {} (:ns m)))]\n    (swap! state update :current-node #(cons new-current-node %))\n    (gdom/appendChild\n     curr-node\n     new-current-node)))\n\n;; ------------------------------------------------------------\n;; Var\n\n(defn add-var-node [m]\n  (let [curr-node (current-node)\n        {:keys [name line file] :as info} (current-var-info)\n        node\n        (div :test-var\n             (div :var-header\n                  (str \"/\" name)\n                  (when line\n                    (div :test-var-line (if file\n                                          (process-file-name info)\n                                          \"line\") \":\"\n                         (n :span {} line)))))]\n    (swap! state update :current-node #(cons node %))\n    (gdom/appendChild curr-node node)))\n\n;; ------------------------------------------------------------\n;; Summary\n\n(defn summary [{:keys [fail error pass test] :as m}]\n  (div :summary-body\n       (when (not (zero? fail))\n         (div :report-number (str fail (pluralize \" failure\" fail))))\n       (when (not (zero? error))\n         (div :report-number (str error (pluralize \" error\" error))))\n       (when-not (failed? m)\n         (div :report-number \"All Tests Passed\"))\n       (div :total-tests\n            (div \"Totals\")\n            (div :test-counts\n                 (div (str test (pluralize \" Test\" test)))\n                 (let [assertions (+ pass fail error)]\n                   (div (str assertions (pluralize \" Assertion\" assertions))))))))\n\n(defn display-summary! [m]\n  (let [report-header (gdom/getElement \"report-header\")\n        summary-node' (gdom/getElement \"summary\")]\n    (classlist/add report-header (if (failed? m)\n                                   \"tests-fail\"\n                                   \"tests-succeed\"))\n    (gdom/removeChildren summary-node')\n    (gdom/appendChild summary-node' (summary m))))\n\n;; ------------------------------------------------------------\n;; Hooking into cljs.test/report\n;; ------------------------------------------------------------\n\n(defn print-comparison [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)]\n    (println \"expected:\" (formatter-fn (:expected m)))\n    (println \"  actual:\" (formatter-fn (:actual m)))))\n\n(defmethod report [::default :pass] [m]\n  (add-passing-node! m)\n  (inc-report-counter! :pass))\n\n;; namespace start and end\n\n(defmethod report [::default :begin-test-ns] [m]\n  (add-ns-node! m)\n  (when printing\n    (println \"\\nTesting\" (name (:ns m)))))\n\n(defmethod report [::default :end-test-ns] [m]\n  (swap! state update :current-node rest))\n\n;; var start and end\n\n(defmethod report [::default :begin-test-var] [m]\n  (add-var-node m))\n\n(defmethod report [::default :end-test-var] [m]\n  (swap! state update :current-node rest))\n\n;; failure and errors\n\n(defmethod report [::default :fail] [m]\n  (add-fail-node! m)\n  (inc-report-counter! :fail)\n  (when printing\n    (println \"\\nFAIL in\" (testing-vars-str m))\n    (when (seq (:testing-contexts (get-current-env)))\n      (println (testing-contexts-str)))\n    (when-let [message (:message m)] (println message))\n    (print-comparison m)))\n\n(defmethod report [::default :error] [m]\n  (inc-report-counter! :error)\n  (println \"\\nERROR in\" (testing-vars-str m))\n  (when (seq (:testing-contexts (get-current-env)))\n    (println (testing-contexts-str)))\n  (when-let [message (:message m)] (println message))\n  (print-comparison m)\n  ;; display AFTER so that error shows up in console after the printed error\n  (add-error-node! m))\n\n;; Ignore these but keep them as a reference\n#_(defmethod report [::default :end-run-tests] [m])\n#_(defmethod report [::default :end-test-all-vars] [m])\n#_(defmethod report [::default :end-test-vars] [m])\n\n;; summary\n\n(defmethod report [::default :summary] [m]\n  (when change-favicon\n    (if (failed? m)\n      (favicon/red)\n      (favicon/green)))\n  (when notifications\n    (if (failed? m)\n      (notify/failure m)\n      (notify/success)))  \n  (display-summary! m)\n  (gdom/appendChild (root-app-node)\n                    (div :footer\n                         (div :container\n                              (div :tip\n                                   \"Hit the \"\n                                   (span :control-key \"P\")\n                                   \" key to toggle the display of passing tests.\"))))\n  (when printing\n    (println \"\\nRan\" (:test m) \"tests containing\"\n             (+ (:pass m) (:fail m) (:error m)) \"assertions.\")\n    (println (:fail m) \"failures,\" (:error m) \"errors.\")))\n\n;; ------------------------------------------------------------\n;; Main API\n;; ------------------------------------------------------------\n\n(defn empty-env []\n  (assoc (cljs.test/empty-env) :reporter ::default))\n\n(defn init!\n  \"This function initializes the environment for a test run. It must\n  be called before every test run.\n\n  As a convenience it returns a cljs.test/empty-env initialized so\n  that the test run will use the cljs-test-display formatter.\n\n  This function takes an optional single argument: the id of the DOM\n  node to mount.  It defaults to \\\"app\\\"\n\n  Example Usage:\n\n  (cljs.test/run-tests (cljs-test-display/init! \\\"app\\\")\n                       'example.core-test\n                       'example.core-other-test)\"\n  ([] (init! nil))\n  ([app-node-id]\n   (if (nil? goog/global.document) ;; if not in HTML env ingore display\n     (cljs.test/empty-env)\n     (do\n       (when app-node-id\n         (assert (or (string? app-node-id)\n                     (symbol? app-node-id)\n                     (keyword? app-node-id))\n                 \"Must provide an something we can call cljs.core/name on.\")\n         (set! root-node-id (name app-node-id)))\n       (assert (gdom/getElement (name root-node-id))\n               (str \"cljs-test-display: Element with id \"\n                    (pr-str root-node-id)\n                    \" does not exist.\"))\n       (when notifications (notify/ask-permission!))\n       (insert-style!)\n       (register-document-events!)\n       (set! (.-innerHTML (root-app-node)) \"\")\n       (add-header-node!)\n       (initialize-state!)\n       (empty-env)))))\n"]}